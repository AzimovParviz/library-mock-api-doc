openapi: 3.0.3
info:
  title: Swagger Booklibrary - OpenAPI 3.0
  description: |-
    This is a sample Book Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the book library, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Booklibrary, then click [here](https://editor.swagger.io/?url=https://library.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Book Store repository](https://github.com/swagger-api/swagger-library)
    - [The source API definition for the Book Store](https://github.com/swagger-api/swagger-library/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://library3.swagger.io/api/v3
tags:
  - name: book
    description: book information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: library
    description: Access to Booklibrary borrows
    externalDocs:
      description: Find out more about our library
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /book:
    put:
      tags:
        - book
      summary: Update book information
      description: Update an existing book by Id
      operationId: updateBook
      requestBody:
        description: Update an existent book in the storage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '405':
          description: Validation exception
      security:
        - library_auth:
            - write:books
            - read:books
    post:
      tags:
        - book
      summary: Add a new book to the library
      description: Add a new book to the library
      operationId: addBook
      requestBody:
        description: Create a new book in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '405':
          description: Invalid input
      security:
        - library_auth:
            - write:books
            - read:books
  /book/findByStatus:
    get:
      tags:
        - book
      summary: Finds Books by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findBooksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid status value
      security:
        - library_auth:
            - write:books
            - read:books
  /book/findByTags:
    get:
      tags:
        - book
      summary: Finds Books by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findBooksByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid tag value
      security:
        - library_auth:
            - write:books
            - read:books
  /book/{bookId}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
      security:
        - api_key: []
        - library_auth:
            - write:books
            - read:books
    post:
      tags:
        - book
      summary: Updates a book in the library with form data
      description: ''
      operationId: updateBookWithForm
      parameters:
        - name: bookId
          in: path
          description: ID of book that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of book that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of book that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - library_auth:
            - write:books
            - read:books
    delete:
      tags:
        - book
      summary: Deletes a book
      description: delete a book
      operationId: deleteBook
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid book value
      security:
        - library_auth:
            - write:books
            - read:books
  /book/{bookId}/uploadImage:
    post:
      tags:
        - book
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: bookId
          in: path
          description: ID of book to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - library_auth:
            - write:books
            - read:books
  /library/inventory:
    get:
      tags:
        - library
      summary: Returns book inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /library/borrow:
    post:
      tags:
        - library
      summary: Place an borrow for a book
      description: Place a new borrow in the library
      operationId: placeBorrow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Borrow'
          application/xml:
            schema:
              $ref: '#/components/schemas/Borrow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Borrow'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrow'
        '405':
          description: Invalid input
  /library/borrow/{borrowId}:
    get:
      tags:
        - library
      summary: Find borrow by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getBorrowById
      parameters:
        - name: borrowId
          in: path
          description: ID of borrow that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrow'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Borrow'
        '400':
          description: Invalid ID supplied
        '404':
          description: Borrow not found
    delete:
      tags:
        - library
      summary: Delete borrow by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteBorrow
      parameters:
        - name: borrowId
          in: path
          description: ID of the borrow that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Borrow not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the library
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Borrow:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        bookId:
          type: integer
          format: int64
          example: 198772
        status:
          type: string
          description: Borrow Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: borrow
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Mystery 
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Book:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Crime and Punishment
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: book status in the library
          enum:
            - available
            - borrowed
      xml:
        name: Book;
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Book:
      description: Book object that needs to be added to the library
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
        application/xml:
          schema:
            $ref: '#/components/schemas/Book'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    library_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://library3.swagger.io/oauth/authorize
          scopes:
            write:books: modify books in your account
            read:books: read your books
    api_key:
      type: apiKey
      name: api_key
      in: header
